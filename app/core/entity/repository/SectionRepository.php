<?php

namespace app\core\entity\repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;

/**
 * SectionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SectionRepository extends NestedTreeRepository
{
    public function getShopSections($idShop, $default = false)
    {
        $fields = array('s.id', 's.title'/*, 'o.id'*/);
//$fields = 'partial s.{id, name}, partial o.{id}';  //if you want to get entity object

        $query = $this->getEntityManager()->createQueryBuilder();
        $or = $query->expr()->orX();
        $or->add($query->expr()->eq('s.shop', $idShop));
//        $or->add($qb->expr()->eq('u.id', 2));
        $query
            ->select($fields)
            ->from($this->getClassName(), 's')
//            ->leftjoin('s.otherEntity', 'o');
            ->where($or);

//        $query->setMaxResults(10);
        $results = $query->getQuery()->getResult();
        $return = [];
//        if ($default)
//            $return += [0 => 'default section'];
        foreach ($results as $result) {
            $return += [$result['id'] => $result['title']];
        }
        return $return;
    }

    public function paginate($page, $no_per_page = 10)
    {
        $dql = "SELECT e FROM {$this->getEntityName()} e WHERE e.id > 0";
        /*JOIN p.comments c*/
        $page = $page - 1;
        $offset = 0;
        if ($page > 0) {
            $offset = $page * $no_per_page;
        }
        $query = $this->getEntityManager()->createQuery($dql)
            ->setFirstResult($offset)
            ->setMaxResults($no_per_page);
        $paginator = new Paginator($query, $fetchJoinCollection = true);
        $count = count($paginator);
        $totalPages = ceil($count / $no_per_page);
        if ($page * $no_per_page > $count) {
            $totalPages = $page;
        }
        $return = [
            'data' => $paginator,
            'templateData' => [
                'currentPage' => (int)$page + 1,
                'totalPages' => (int)$totalPages
            ]
        ];
        return $return;
    }

}
